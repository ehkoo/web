---
import { Markdown } from '@astropub/md'
import Picture from '@/components/Picture.astro'
import { getPostsForHomepage, resizePostCover } from '@/lib'

const resizeCover = (post) => resizePostCover(post, { width: 400, height: 225 })
const posts = await getPostsForHomepage()
---

<style>
  .posts {
    --flow-space: 0.5em;

    display: grid;
    column-gap: var(--size-4);
    row-gap: calc(2 * var(--size-4));

    @media (width > 60rem) {
      grid-template-columns: repeat(auto-fit, minmax(30ch, 1fr));
    }

    @media (width > 80rem) {
      grid-template-columns: repeat(auto-fit, minmax(40ch, 1fr));
    }
  }

  .topic {
    --topic-border-size: 2px;
    --topic-border-color: var(--stone-8);
    --topic-padding-size: var(--size-4);
    --topic-radius: var(--radius-2);

    border: var(--topic-border-size) solid var(--topic-border-color);
    padding-inline: var(--topic-padding-size);
    padding-block-end: var(--topic-padding-size);
    border-radius: var(--topic-radius);
  }

  .topic-title {
    --_padding-size: 0.5ch;

    &[data-variant='css'] {
      --_bg: var(--indigo-2);
      --_fg: var(--indigo-9);
    }
    &[data-variant='javascript'] {
      --_bg: var(--yellow-3);
      --_fg: var(--stone-9);
    }
    &[data-variant='html'] {
      --_bg: var(--pink-2);
      --_fg: var(--pink-9);
    }
    &[data-variant='react'] {
      --_bg: var(--blue-2);
      --_fg: var(--blue-9);
    }
    &[data-variant='vue'] {
      --_bg: var(--green-2);
      --_fg: var(--green-9);
    }
    &[data-variant='vue'] {
      --_bg: var(--green-2);
      --_fg: var(--green-9);
    }
    &[data-variant='typescript'] {
      --_bg: #3178c6;
      --_fg: #ffffff;
    }
    &[data-variant='git'] {
      --_bg: #fff;
      --_fg: #da4b34;
    }

    background-color: var(--_bg, var(--surface-0));
    color: var(--_fg, currentColor);
    border-radius: var(--topic-radius);
    font-size: var(--font-size-2);
    text-align: center;
    margin-block-start: calc((1ex + var(--_padding-size) + var(--topic-border-size)) * -1);
    margin-inline: 1ch;
    border: var(--topic-border-size) solid var(--_fg, var(--topic-border-color));
    padding-block: var(--_padding-size);
  }

  .article {
    --flow-space: var(--size-4);

    display: grid;
    align-items: center;
    gap: var(--size-3);
    grid-template-columns: repeat(auto-fit, minmax(30ch, 1fr));

    @media (width > 60rem) {
      grid-template-columns: repeat(auto-fit, minmax(20ch, 1fr));
    }

    & :global(header) {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 1ch;

      grid-column: 1 / -1;
    }

    & :global(code) {
      font-size: var(--code-font-size);
      background-color: var(--code-background);
      color: var(--code-color);
      padding-inline: var(--size-1);
      border-radius: var(--radius-1);
    }

    & :global(picture > img) {
      border-radius: var(--size-3);
    }
  }

  .title {
    font-weight: 700;
    line-height: 1.25;
    font-size: var(--font-size-bigger);
  }

  .meta {
    color: var(--stone-8);
    font-size: 0.9em;
    display: flex;
    justify-content: space-between;
    gap: 1ch;

    font-style: normal;
  }

  .link {
    text-decoration: none;

    &:hover {
      text-decoration: underline;
    }
  }

  .related-separator {
    border: none;
    border-block-end: 2px dashed var(--stone-4);
    width: 90%;
    margin-block: var(--size-5);
  }

  .related-title {
    font-size: var(--font-size-big);
    margin: 0;
    margin-block-end: var(--size-3);
  }

  .related-posts {
    margin-inline-start: 0;
    padding-inline-start: var(--size-4);

    & :global(li)::marker {
      content: '→ ';
      color: var(--stone-7);
    }
  }
</style>

<div class="posts">
  {
    posts.map(([tag, posts]) => {
      const [p, ...rest] = posts
      const post = resizeCover(p)
      const { data } = post

      return (
        <section class="flow topic">
          <h2 data-variant={tag.toLowerCase()} class="topic-title">
            #{tag}
          </h2>

          <article class="article">
            <header>
              <a href={data.url} class="link">
                <h3 class="title">
                  <Markdown.Inline of={data.title} />
                </h3>
              </a>
            </header>

            <div class="flow article-container">
              <p class="excerpt">
                <Markdown.Inline of={data.excerpt} />
              </p>

              <footer>
                <address class="meta">
                  <author>@{data.author}</author>

                  <time datetime="" class="published_at">
                    {data.formattedDate}
                  </time>
                </address>
              </footer>
            </div>

            <Picture figure={data?.figure} cover={data?.cover} showCaption={false} />
          </article>

          {rest.length > 0 && (
            <>
              <hr class="related-separator" />
              <h3 class="related-title">Bài cùng chủ đề</h3>

              <ul class="related-posts flow">
                {rest.map((post) => (
                  <li>
                    <a class="no-underline-link" href={post.data.url}>
                      {post.data.title}
                    </a>
                  </li>
                ))}
              </ul>
            </>
          )}
        </section>
      )
    })
  }
</div>
